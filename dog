#!/usr/bin/env python

import sys
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import numpy as np
import csv

colors = ['xkcd:red', 'xkcd:brown', 'xkcd:blue', 'xkcd:purple', 'xkcd:orange', 
          'xkcd:light blue', 'xkcd:teal', 'xkcd:magenta', 'xkcd:grey',
          'xkcd:turquoise', 'xkcd:cyan', 'xkcd:maroon',
          'xkcd:olive', 'xkcd:salmon', 'xkcd:beige', 'xkcd:navy blue', 'xkcd:black', 
          'xkcd:hot pink', 'xkcd:burnt', 'xkcd:bluegray', 'xkcd:battleship grey', 'xkcd:pink', 'xkcd:yellow', 'xkcd:light purple']

if len(sys.argv) == 1:
    print("dog <id>")
    sys.exit(0)

if int(sys.argv[1]) < 10:
    input = 'benchmarks/%s.csv' % sys.argv[2]
else:
    input = 'benchmarks/%s_branches_stats.csv' % sys.argv[2]

#
# Read input file
#
data = []
with open(input, 'r') as f:
    reader = csv.reader(f)
    for row in reader:
        data.append( row[1:] )


if int(sys.argv[1]) < 10:
    legend = {}
    legend['simple_1'] = 'sum()'
    legend['simple_2'] = 'summation()'
    legend['simple_3'] = 'loop (e += t)'
    legend['simple_4'] = 'loop (e = e + t)'
    legend['simple_5'] = 'loop (e = t + e)'
    legend['simple_6'] = 'Sum()'
    #
    # Process data
    #
    p = {}
    labels = {}
    xticks = {}
    for row in data:
        if row[0] not in labels:
            labels[row[0]] = []
        if not row[1] in labels[row[0]]:
            if row[1] == 'master':
                append = True
                for i in range(len(labels[row[0]])):
                    if labels[row[0]][i][0].isalpha():
                        labels[row[0]].insert(i, row[1])
                        append = False
                        break
                if append:
                    labels[row[0]].append(row[1])
            else:
                labels[row[0]].append(row[1])
        if row[4] == "":
            continue

        if row[0] not in p:
            p[row[0]] = {}
        if row[2] not in p[row[0]]:
            p[row[0]][row[2]] = {}
        p[row[0]][row[2]][row[1]] = float(row[4])

else:
    #
    # Process data
    #
    p = {}
    labels = {}
    xticks = {}
    for row in data:
        if row[0] not in labels:
            labels[row[0]] = []
        if not row[1] in labels[row[0]]:
            if row[1] == 'master':
                append = True
                for i in range(len(labels[row[0]])):
                    if labels[row[0]][i][0].isalpha():
                        labels[row[0]].insert(i, row[1])
                        append = False
                        break
                if append:
                    labels[row[0]].append(row[1])
            else:
                labels[row[0]].append(row[1])
        if row[6] == "":
            continue

        if row[0] not in p:
            p[row[0]] = {}
        if row[2] not in p[row[0]]:
            p[row[0]][row[2]] = {}
        if row[1] not in p[row[0]][row[2]]:
            p[row[0]][row[2]][row[1]] = {}
        p[row[0]][row[2]][row[1]][row[3], row[4]] = float(row[6])

for python in labels:
    xticks[python] = []
    for version in labels[python]:
        if '.' in version:
            tmp = version.split('.')
            xticks[python].append( '.'.join(tmp[:2]) )
        else:
            xticks[python].append(version)


if sys.argv[1] == "1" or sys.argv[1] == "2":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    skip = []
    if sys.argv[1] == "2":
        skip.append('simple_4')
        skip.append('simple_5')

    line_colors = {'simple_1':'r', 'simple_2':'g', 'simple_3':'b', 'simple_4':'c', 'simple_5':'m', 'simple_6':'y'}

    #
    # Plot 
    #
    for python_ in p:
        if python_.endswith('cython'):
            continue

        pversions = [python_]
        if python_+'-cython' in p:
            pversions.append( python_+'-cython' )

        for python in pversions:
          for line in p[python]:
            if line.startswith('simple'):
                if line in skip:
                    continue
                #if python.endswith('cython') and not i == 6:
                #    continue
                x_ = [-1]*len(labels[python_])
                y_ = [-1]*len(labels[python_])
                #print(line)
                #print(p[python][line])
                for x in p[python][line]:
                    i = labels[python_].index(x)
                    x_[i] = i
                    y_[i] = p[python][line][x]
                #print(x_)
                #print(y_)
                x__ = []
                y__ = []
                for i in range(len(x_)):
                    if x_[i] != -1:
                        x__.append(x_[i])
                        y__.append(y_[i])
                if len(x__) == 1:
                    if python.endswith('cython'):
                        plt.plot(x__, y__, 'o', markersize=3, label="cy: "+legend[line], c=line_colors[line])
                    else:
                        plt.plot(x__, y__, '+', markersize=7, label=legend[line], c=line_colors[line])
                else:
                    plt.plot(x__, y__, label=legend[line], c=line_colors[line])

        plt.xlabel("X Label")
        plt.ylabel("Y Label")
        plt.title("Simple Expressions: %s" % (python_))
        #plt.legend()
        #plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)
        plt.legend(loc=2, borderaxespad=0.)

        #print(labels[python])
        plt.xticks(range(len(labels[python_])), xticks[python_])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "3":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    for python in p:
        for line in p[python]:
            if not line.endswith('_1'):
                continue
            name = line[:-2]
            x_ = [-1]*len(labels[python_])
            y_ = [-1]*len(labels[python_])

            for i in range(len(labels[python_])):
                if labels[python_][i] in p[python]["%s_4" % name]:
                    x_[i] = i
                    y_[i] = p[python]["%s_4" % name][labels[python_][i]] / p[python]["%s_1" % name][labels[python_][i]]

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', markersize=3, label=line[:-2])
            else:
                plt.plot(x__, y__, label=line[:-2])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("(Time e=e+x)/(Time sum(x))")
        plt.title("Slowdown of Simple Loops: %s" % (python))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python_])), labels[python_])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "4":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    line_colors = {'simple':colors[0], 'const':colors[1], 'param':colors[2], 'mutable':colors[3], 'nonl':colors[4], 'bilinear':colors[5], 'nested':colors[6], 'weighted':colors[7]}

    for python_ in p:
        if python_.endswith('cython'):
            continue

        pversions = [python_]
        if python_+'-cython' in p:
            pversions.append( python_+'-cython' )

        for python in pversions:
          for line in p[python]:
            if not line.endswith('_1'):
                continue
            name = line[:-2]
            x_ = [-1]*len(labels[python_])
            y_ = [-1]*len(labels[python_])

            for i in range(len(labels[python_])):
                if labels[python_][i] in p[python][line]:
                    x_[i] = i
                    y_[i] = p[python][line][labels[python_][i]]

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                if python.endswith('cython'):
                    plt.plot(x__, y__, 'o', markersize=3, label="cy: "+line, c=line_colors[name])
                else:
                    plt.plot(x__, y__, '+', markersize=7, label=line, c=line_colors[name])
            else:
                plt.plot(x__, y__, label=line, c=line_colors[name])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("Runtime")
        plt.title("Performance of sum(x): %s" % (python))
        plt.legend(loc=2, borderaxespad=0.)

        #print(labels[python])
        plt.xticks(range(len(labels[python_])), xticks[python_])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


#
# convert
#

elif sys.argv[1] == "10":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])


    lines = []
    for python in p:
        for line in p[python]:
            if not line in lines:
                lines.append(line)

    for format_ in ('nl', 'lp'):
      for python in p:
        if python.endswith('cython'):
            continue
        for line in p[python]:
            if '_quick' in line:
                continue
            #print(python, line, labels[python][0])
            #print(list(p[python][line].keys()))
            x_ = [-1]*len(labels[python])
            y_ = [-1]*len(labels[python])

            for i in range(len(labels[python])):
                if labels[python][i] in p[python][line]:
                    val = p[python][line][labels[python][i]].get((format_, 'total'), None)
                    if val is None:
                        continue
                    x_[i] = i
                    y_[i] = val

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 0:
                continue
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', label=line, markersize=3, c=colors[lines.index(line)])
            else:
                plt.plot(x__, y__, label=line, c=colors[lines.index(line)])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("Runtime")
        plt.title("Time to Create a %s File: %s" % (format_, python))
        plt.legend()

        plt.xticks(range(len(labels[python])), xticks[python])
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "11":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    lines = []
    for python in p:
        for line in p[python]:
            if not line in lines:
                lines.append(line)

    for format_ in ('nl', 'lp'):
      for python in p:
        for line in p[python]:
            if not (format_, 'total') in p[python][line][labels[python][0]]:
                continue
            x_ = [-1]*len(labels[python])
            y_ = [-1]*len(labels[python])

            for i in range(len(labels[python])):
                if labels[python][i] in p[python][line]:
                    x_[i] = i
                    try:
                        y_[i] = p[python][line][labels[python][i]][format_, 'total']
                    except KeyError:
                        print(python, line, labels[python][i])
                        print(list(p[python][line][labels[python][i]].keys()))
                        #sys.exit(0)
                        raise

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            for i in range(len(y__)):
                y__[i] = y__[i]/max(y__[0],1e-7)
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', markersize=3, c=colors[lines.index(line)])
            else:
                plt.plot(x__, y__, label=line, c=colors[lines.index(line)])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("Runtime")
        plt.title("Time to Create a %s File: %s" % (format_, python))
        plt.legend()

        plt.xticks(range(len(labels[python])), xticks[python])
        pp.savefig()
        plt.clf()

    pp.close()

#
# Bar graphs - comparison between master and other branches
#
elif sys.argv[1] == "12":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])


    lines = []
    for python in p:
        for line in p[python]:
            if not line in lines:
                lines.append(line)

    ticks = set()
    for python in p:
      for line in p[python]:
        if '_quick' in line:
            continue
        ticks.add(line)
    ticks = list(ticks)
    ticks.sort()
    #print(ticks)

    for format_ in ('nl', 'lp'):
      for python in p:
        if python.endswith('cython'):
            continue

        ind = np.arange(len(ticks))
        fig, ax = plt.subplots()
        tmp = {}
        for label in labels[python]:
            tmp[label] = [-1] * len(ticks)
        width = 0.8/len(tmp.keys())

        for line in p[python]:
            if '_quick' in line:
                continue

            for i in range(len(labels[python])):
                if labels[python][i] in p[python][line]:
                    val = p[python][line][labels[python][i]].get((format_, 'total'), None)
                    if val is None:
                        continue
                    tmp[labels[python][i]][ticks.index(line)] = val

        #print(tmp)
        for key in tmp:
            i = labels[python].index(key)
            ax.bar(ind - 0.4 + width/2 + width*i, tmp[key], width, label=key, color=colors[i])

        ax.set_xlabel("Pyomo Test Problems")
        ax.set_ylabel("Runtime")
        ax.set_title("Time to Create a %s File: %s" % (format_, python))
        ax.legend()
        ax.set_xticks(ind)
        ax.set_xticklabels(ticks, rotation='vertical')

        plt.subplots_adjust(bottom=0.5)
        pp.savefig()
        plt.clf()

    pp.close()

#
# Bar graphs - relative comparison between master and other branches
#
elif sys.argv[1] == "13":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])


    lines = []
    for python in p:
        for line in p[python]:
            if not line in lines:
                lines.append(line)

    ticks = set()
    for python in p:
      for line in p[python]:
        if '_quick' in line:
            continue
        ticks.add(line)
    ticks = list(ticks)
    ticks.sort()
    #print(ticks)

    for format_ in ('nl', 'lp'):
      for python in p:
        if python.endswith('cython'):
            continue

        ind = np.arange(len(ticks))
        fig, ax = plt.subplots()
        tmp = {}
        for label in labels[python]:
            tmp[label] = [-1] * len(ticks)
        width = 0.8/len(tmp.keys())
        #
        # Collect Data
        #
        for line in p[python]:
            if '_quick' in line:
                continue

            for i in range(len(labels[python])):
                if labels[python][i] in p[python][line]:
                    val = p[python][line][labels[python][i]].get((format_, 'total'), None)
                    if val is None:
                        continue
                    tmp[labels[python][i]][ticks.index(line)] = val
        print(tmp)
        #
        # Normalize data
        #
        for i in range(len(tmp['master'])):
            val = None
            if tmp['master'][i] < 0:
                for key in tmp:
                    if tmp[key][i] > -1 and (val is None or tmp[key][i] < val):
                        val = tmp[key][i]
            else:
                val = tmp['master'][i]
            if val is None:
                continue
            val += 1e-7
            for key in tmp:
                if tmp[key][i] > -1:
                    tmp[key][i] = (tmp[key][i]+1e-7)/val
        print(tmp)
        #
        # Create barchart
        #
        for key in tmp:
            i = labels[python].index(key)
            ax.bar(ind - 0.4 + width/2 + width*i, tmp[key], width, label=key, color=colors[i])

        ax.set_xlabel("Pyomo Test Problems")
        ax.set_ylabel("Normalized Runtime")
        ax.set_title("Normalized Time to Create a %s File: %s" % (format_, python))
        ax.legend()
        ax.set_xticks(ind)
        ax.set_xticklabels(ticks, rotation='vertical')

        plt.subplots_adjust(bottom=0.5)
        pp.savefig()
        plt.clf()

    pp.close()

#
# Bar graphs - relative comparison between master and other expr_dev variants
#
elif sys.argv[1] == "14":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])


    lines = []
    for python in p:
        for line in p[python]:
            if not line in lines:
                lines.append(line)

    ticks = set()
    for python in p:
      for line in p[python]:
        if '_quick' in line:
            continue
        ticks.add(line)
    ticks = list(ticks)
    ticks.sort()
    #print(ticks)

    labels_ = ['master', 'default', 'cython', 'quick', 'quick+cython']
    for format_ in ('nl', 'lp'):
      for python in p:
        if python.endswith('cython'):
            continue

        ind = np.arange(len(ticks))
        fig, ax = plt.subplots()
        tmp = {}
        tmp['master'] = [-1] * len(ticks)
        tmp['default'] = [-1] * len(ticks)
        tmp['cython'] = [-1] * len(ticks)
        tmp['quick'] = [-1] * len(ticks)
        tmp['quick+cython'] = [-1] * len(ticks)
        width = 0.8/len(tmp.keys())
        #
        # Collect Data
        #
        for line in p[python]:
            if '_quick' in line:
                continue

            if 'master' in p[python][line]:
                val = p[python][line]['master'].get((format_, 'total'), None)
                if val is None:
                    continue
                tmp['master'][ticks.index(line)] = val
            if 'expr_dev' in p[python][line]:
                val = p[python][line]['expr_dev'].get((format_, 'total'), None)
                if val is None:
                    continue
                tmp['default'][ticks.index(line)] = val
            if 'expr_dev' in p.get(python+"-cython",{}).get(line,{}):
                val = p[python+"-cython"][line]['expr_dev'].get((format_, 'total'), None)
                if val is None:
                    continue
                tmp['cython'][ticks.index(line)] = val
            if '_' in line:
                line_ = line.split('_')
                line_.insert(-1,'quick')
                line_ = '_'.join(line_)
                if 'expr_dev' in p[python].get(line_,{}):
                    val = p[python][line_]['expr_dev'].get((format_, 'total'), None)
                    if val is None:
                        continue
                    tmp['quick'][ticks.index(line)] = val
                if 'expr_dev' in p.get(python+"-cython",{}).get(line_,{}):
                    val = p[python+"-cython"][line_]['expr_dev'].get((format_, 'total'), None)
                    if val is None:
                        continue
                    tmp['quick+cython'][ticks.index(line)] = val
        print(tmp)
        #
        # Normalize data
        #
        print()
        print(len(tmp['master']))
        for i in range(len(tmp['master'])):
            val = None
            if tmp['master'][i] < 0:
                for key in tmp:
                    if tmp[key][i] > -1 and (val is None or tmp[key][i] < val):
                        val = tmp[key][i]
            else:
                val = tmp['master'][i]
            if val is None:
                continue
            val += 1e-7
            for key in tmp:
                if tmp[key][i] > -1:
                    tmp[key][i] = (tmp[key][i]+1e-7)/val
        print(tmp)
        #
        # Create barchart
        #
        for key in tmp:
            i = labels_.index(key)
            ax.bar(ind - 0.4 + width/2 + width*i, tmp[key], width, label=key, color=colors[i])

        ax.set_xlabel("Pyomo Test Problems")
        ax.set_ylabel("Normalized Runtime")
        ax.set_title("Normalized Time to Create a %s File: %s" % (format_, python))
        ax.set_xticks(ind)
        ax.set_xticklabels(ticks, rotation='vertical')
        ax.legend(loc='upper center', bbox_to_anchor=(1.25,1))
        #chartBox = ax.get_position()
        #ax.set_position([chartBox.x0, chartBox.y0, chartBox.width*0.4, chartBox.height])

        plt.subplots_adjust(bottom=0.5, right=0.7)
        pp.savefig()
        plt.clf()

    pp.close()

