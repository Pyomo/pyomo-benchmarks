#!/usr/bin/env python

import sys
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import csv

colors = ['xkcd:pink', 'xkcd:red', 'xkcd:brown', 'xkcd:blue', 'xkcd:purple', 'xkcd:orange', 
          'xkcd:light blue', 'xkcd:teal', 'xkcd:magenta', 'xkcd:yellow', 'xkcd:grey',
          'xkcd:light purple', 'xkcd:turquoise', 'xkcd:cyan', 'xkcd:muave', 'xkcd:maroon',
          'xkcd:olive', 'xkcd:salmon', 'xkcd:beige', 'xkcd:navy blue', 'xkcd:black', 
          'xkcd:hot pink', 'xkcd:burnt', 'xkcd:bluegray', 'xkcd:battleship grey']

if len(sys.argv) == 1:
    print("dog <id>")
    sys.exit(0)

if int(sys.argv[1]) < 10:
    input = 'benchmarks/expr10.csv'
    legend = {}
    legend['simple_1'] = 'sum()'
    legend['simple_2'] = 'summation()'
    legend['simple_3'] = 'loop (e += t)'
    legend['simple_4'] = 'loop (e = e + t)'
    legend['simple_5'] = 'loop (e = t + e)'
    legend['simple_6'] = 'Sum()'
    #
    # Read input file
    #
    data = []
    with open(input, 'r') as f:
        reader = csv.reader(f)
        flag = True
        for row in reader:
            if flag:
                header = row
                flag = False
                continue
            data.append( row )
    #
    # Process data
    #
    p = {}
    labels = {}
    xticks = {}
    for row in data:
        if row[1] not in labels:
            labels[row[1]] = []
        if not row[2] in labels[row[1]]:
            labels[row[1]].append(row[2])
        if row[6] == "":
            continue

        if row[1] not in p:
            p[row[1]] = {}
        if row[3] not in p[row[1]]:
            p[row[1]][row[3]] = {}
        p[row[1]][row[3]][row[2]] = float(row[6])

else:
    input = 'benchmarks/convertS.csv'

    #
    # Read input file
    #
    data = []
    with open(input, 'r') as f:
        reader = csv.reader(f)
        flag = True
        for row in reader:
            if flag:
                header = row
                flag = False
                continue
            data.append( row )
    #
    # Process data
    #
    p = {}
    labels = {}
    for row in data:
        if row[1] not in labels:
            labels[row[1]] = []
        if not row[2] in labels[row[1]]:
            labels[row[1]].append(row[2])
        if row[8] == "":
            continue

        if row[1] not in p:
            p[row[1]] = {}
        if row[3] not in p[row[1]]:
            p[row[1]][row[3]] = {}
        if row[2] not in p[row[1]][row[3]]:
            p[row[1]][row[3]][row[2]] = {}
        p[row[1]][row[3]][row[2]][row[4], row[5]] = float(row[8])

for python in labels:
    xticks[python] = []
    for version in labels[python]:
        if '.' in version:
            tmp = version.split('.')
            xticks[python].append( '.'.join(tmp[:2]) )
        else:
            xticks[python].append(version)

if sys.argv[1] == "1" or sys.argv[1] == "2":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    skip = []
    if sys.argv[1] == "2":
        skip.append('simple_4')
        skip.append('simple_5')

    line_colors = {'simple_1':'r', 'simple_2':'g', 'simple_3':'b', 'simple_4':'c', 'simple_5':'m', 'simple_6':'y'}

    #
    # Plot 
    #
    for python_ in p:
        if python_.endswith('cython'):
            continue

        pversions = [python_]
        if python_+'-cython' in p:
            pversions.append( python_+'-cython' )

        for python in pversions:
          for line in p[python]:
            if line.startswith('simple'):
                if line in skip:
                    continue
                #if python.endswith('cython') and not i == 6:
                #    continue
                x_ = [-1]*len(labels[python_])
                y_ = [-1]*len(labels[python_])
                #print(line)
                #print(p[python][line])
                for x in p[python][line]:
                    i = labels[python_].index(x)
                    x_[i] = i
                    y_[i] = p[python][line][x]
                #print(x_)
                #print(y_)
                x__ = []
                y__ = []
                for i in range(len(x_)):
                    if x_[i] != -1:
                        x__.append(x_[i])
                        y__.append(y_[i])
                if len(x__) == 1:
                    if python.endswith('cython'):
                        plt.plot(x__, y__, 'o', markersize=3, label="cy: "+legend[line], c=line_colors[line])
                    else:
                        plt.plot(x__, y__, '+', markersize=7, label=legend[line], c=line_colors[line])
                else:
                    plt.plot(x__, y__, label=legend[line], c=line_colors[line])

        plt.xlabel("X Label")
        plt.ylabel("Y Label")
        plt.title("Simple Expressions: %s" % (python_))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python_])), xticks[python_])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "3":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    for python in p:
        for line in p[python]:
            if not line.endswith('_1'):
                continue
            name = line[:-2]
            x_ = [-1]*len(labels[python_])
            y_ = [-1]*len(labels[python_])

            for i in range(len(labels[python_])):
                if labels[python_][i] in p[python]["%s_4" % name]:
                    x_[i] = i
                    y_[i] = p[python]["%s_4" % name][labels[python_][i]] / p[python]["%s_1" % name][labels[python_][i]]

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', markersize=3, label=line[:-2])
            else:
                plt.plot(x__, y__, label=line[:-2])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("(Time e=e+x)/(Time sum(x))")
        plt.title("Slowdown of Simple Loops: %s" % (python))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python_])), labels[python_])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "4":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    line_colors = {'simple':colors[0], 'const':colors[1], 'param':colors[2], 'mutable':colors[3], 'nonl':colors[4], 'bilinear':colors[5], 'nested':colors[6]}

    for python_ in p:
        if python_.endswith('cython'):
            continue

        pversions = [python_]
        if python_+'-cython' in p:
            pversions.append( python_+'-cython' )

        for python in pversions:
          for line in p[python]:
            if not line.endswith('_1'):
                continue
            name = line[:-2]
            x_ = [-1]*len(labels[python_])
            y_ = [-1]*len(labels[python_])

            for i in range(len(labels[python_])):
                if labels[python_][i] in p[python][line]:
                    x_[i] = i
                    y_[i] = p[python][line][labels[python_][i]]

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                if python.endswith('cython'):
                    plt.plot(x__, y__, 'o', markersize=3, label="cy: "+line, c=line_colors[name])
                else:
                    plt.plot(x__, y__, '+', markersize=7, label=line, c=line_colors[name])
            else:
                plt.plot(x__, y__, label=line, c=line_colors[name])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("Runtime")
        plt.title("Performance of sum(x): %s" % (python))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python_])), xticks[python_])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


#
# convert
#

elif sys.argv[1] == "10":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    lines = []
    for python in p:
        for line in p[python]:
            if not line in lines:
                lines.append(line)

            for label in p[python][line]:
                for a, b in p[python][line][label]:
                    if b != 'total':
                        continue
                    print(python, line, label, (a,b), p[python][line][label][a,b])
    
    for python in p:
        print(labels[python])

    for format_ in ('nl', 'lp'):
      for python in p:
        for line in p[python]:
            print(list(p[python][line][labels[python][0]].keys()))
            if not (format_, 'total') in p[python][line][labels[python][0]]:
                continue
            x_ = [-1]*len(labels[python])
            y_ = [-1]*len(labels[python])

            for i in range(len(labels[python])):
                if labels[python][i] in p[python][line]:
                    x_[i] = i
                    try:
                        y_[i] = p[python][line][labels[python][i]][format_, 'total']
                    except KeyError:
                        print(python, line, labels[python][i])
                        print(list(p[python][line][labels[python][i]].keys()))
                        #sys.exit(0)
                        raise

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', markersize=3, c=colors[lines.index(line)])
            else:
                plt.plot(x__, y__, label=line, c=colors[lines.index(line)])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("Runtime")
        plt.title("Model Construction Times: %s" % (python))
        plt.legend()

        plt.xticks(range(len(labels[python])), labels[python])
        pp.savefig()
        plt.clf()

    pp.close()
