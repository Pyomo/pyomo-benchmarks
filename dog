#!/usr/bin/env python

import sys
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import csv

if len(sys.argv) == 1:
    print("dog <id>")
    sys.exit(0)

legend = {}
legend['simple_1'] = 'sum()'
legend['simple_2'] = 'summation()'
legend['simple_3'] = 'loop (e += t)'
legend['simple_4'] = 'loop (e = e + t)'
legend['simple_5'] = 'loop (e = t + e)'
legend['simple_6'] = 'Sum()'

#
# Read expr.csv
#
data = []
with open('benchmarks/expr10.csv', 'r') as f:
    reader = csv.reader(f)
    flag = True
    for row in reader:
        if flag:
            header = row
            flag = False
            continue
        data.append( row )
#
# Process data
#
p = {}
labels = {}
for row in data:
    if row[1] not in labels:
        labels[row[1]] = []
    if not row[2] in labels[row[1]]:
        labels[row[1]].append(row[2])
    if row[6] == "":
        continue

    if row[1] not in p:
        p[row[1]] = {}
    if row[3] not in p[row[1]]:
        p[row[1]][row[3]] = {}
    p[row[1]][row[3]][row[2]] = float(row[6])


if sys.argv[1] == "1" or sys.argv[1] == "2":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    skip = []
    if sys.argv[1] == "2":
        skip.append('simple_4')
        skip.append('simple_5')
    #
    # Plot 
    #
    for python in p:
        for line in p[python]:
            if line.startswith('simple'):
                if line in skip:
                    continue
                x_ = [-1]*len(labels[python])
                y_ = [-1]*len(labels[python])
                #print(line)
                #print(p[python][line])
                for x in p[python][line]:
                    i = labels[python].index(x)
                    x_[i] = i
                    y_[i] = p[python][line][x]
                #print(x_)
                #print(y_)
                x__ = []
                y__ = []
                for i in range(len(x_)):
                    if x_[i] != -1:
                        x__.append(x_[i])
                        y__.append(y_[i])
                if len(x__) == 1:
                    plt.plot(x__, y__, 'o', markersize=3, label=legend[line])
                else:
                    plt.plot(x__, y__, label=legend[line])

        plt.xlabel("X Label")
        plt.ylabel("Y Label")
        plt.title("Simple Expressions: %s" % (python))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python])), labels[python])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "3":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    for python in p:
        for line in p[python]:
            if not line.endswith('_1'):
                continue
            name = line[:-2]
            x_ = [-1]*len(labels[python])
            y_ = [-1]*len(labels[python])

            for i in range(len(labels[python])):
                if labels[python][i] in p[python]["%s_4" % name]:
                    x_[i] = i
                    y_[i] = p[python]["%s_4" % name][labels[python][i]] / p[python]["%s_1" % name][labels[python][i]]

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', markersize=3, label=line[:-2])
            else:
                plt.plot(x__, y__, label=line[:-2])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("(Time e=e+x)/(Time sum(x))")
        plt.title("Slowdown of Simple Loops: %s" % (python))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python])), labels[python])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()


elif sys.argv[1] == "4":
    pp = PdfPages('dog%s.pdf' % sys.argv[1])
    print("Creating dog%s.pdf" % sys.argv[1])

    line_colors = {'simple':'r', 'const':'g', 'param':'b', 'mutable':'c', 'nonl':'m', 'bilinear':'y', 'nested':'k'}

    for python in p:
        for line in p[python]:
            if not line.endswith('_1') and not line.endswith('_6'):
                continue
            name = line[:-2]
            x_ = [-1]*len(labels[python])
            y_ = [-1]*len(labels[python])

            for i in range(len(labels[python])):
                if labels[python][i] in p[python][line]:
                    x_[i] = i
                    y_[i] = p[python][line][labels[python][i]]

            x__ = []
            y__ = []
            for i in range(len(x_)):
                if x_[i] != -1:
                    x__.append(x_[i])
                    y__.append(y_[i])
            if len(x__) == 1:
                plt.plot(x__, y__, 'o', markersize=3, c=line_colors[name])
            else:
                plt.plot(x__, y__, label=line, c=line_colors[name])
    
        plt.xlabel("Pyomo Releases/Branches")
        plt.ylabel("Runtime")
        plt.title("Performance of sum(x): %s" % (python))
        plt.legend()

        #print(labels[python])
        plt.xticks(range(len(labels[python])), labels[python])
        #plt.show()
        pp.savefig()
        plt.clf()

    pp.close()
